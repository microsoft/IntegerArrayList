{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "The IntegerArrayListTest Class",
  "steps": [
    {
      "file": "src/IntegerArrayListTest.java",
      "description": "This is the `IntegerArrayListTest` class and this is where you'll implement all of the unit tests for the `IntegerArrayList` class. This CodeTour is following [unit 3 from the \"Implementing unit tests in a simple Java program\" module on Microsoft Learn]().",
      "pattern": "^[^\\S\\n]*public class IntegerArrayListTest \\{"
    },
    {
      "file": "src/IntegerArrayListTest.java",
      "description": "First, import three classes from the JUnit API so that you can benefit from using the framework. Make sure you understand what each of these classes do:\n\n- `import static org.junit.jupiter.api.Assertions.assertEquals;`  [See JUnit documentation for assertEquals here](https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html#assertEquals)  \n   Assertions let you express expecatations about variables. Your test will fail when the variable does not meet the expectation.  \n\n- `import org.junit.jupiter.api.Test;`   [See JUnit documentation for Test here](https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Test.html)  \n  `@Test` is an annotation placed above several methods in the `IntegerArrayListTest` class below. JUnit automatically finds the annotated methods and treats them as test cases.\n\n- `import org.junit.jupiter.api.BeforeEach;`  [See JUnit documentation for BeforeEach here](https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/BeforeEach.html)  \n  `@BeforeEach` is an annotation placed above the `setup` method in the `IntegerArrayListTest` class below. This means that the setup method will be executed before each test case. ",
      "line": 4,
      "selection": {
        "start": {
          "line": 3,
          "character": 1
        },
        "end": {
          "line": 4,
          "character": 35
        }
      }
    },
    {
      "file": "src/IntegerArrayListTest.java",
      "description": "The `setup` method will be executed before each test case in `IntegerArrayListTest` because it is annotated with `@BeforeEach`. \n\nThis means that for each test case the `list` variable will be reset to a new empty `IntegerArrayList`.  \n\n`@BeforeEach` allows us to reuse initialization code accross different test cases.",
      "pattern": "^[^\\S\\n]*public void setup\\(\\) \\{"
    },
    {
      "file": "src/IntegerArrayListTest.java",
      "description": "All test methods inside `IntegerArrayListTest` are annotated with `@Test` so that JUnit can find them.\n\nTry clicking \"Run Test\" above this method. It should pass and you should see a small checkmark appear next to \"Debug Test\" above this method.\n\nNext, try to make it fail by placing `assertEquals(1, 2);` into the body of the method, saving the file, and clicking \"Run Test\" above this method again. When it failed, you should see a small x appear next to the \"Debug Test\" above this method, and the Java Test Report should open in your VS Code window.\n\nMake sure you delete the `assertEquals(1, 2);` before going on to the next step.",
      "pattern": "^[^\\S\\n]*public void testSizeEmptyList\\(\\) \\{"
    },
    {
      "file": "src/IntegerArrayListTest.java",
      "description": "Now that you know what a passing test and a failing test look like, implement the actual test cases for `testSizeEmptyList`.\n\nNote that we are testing whether or not `IntegerArrayList` correctly implements the behavior of the interface as defined in `IntegerList`. So we want to make assertions about `size()` the method and not about the `size` variable. \n\nNote that we may or may not have introduced bugs in our implementation. If you encouter a bug, be sure to fix the bug to make your test pass.\n\nIf you need help, move on to the next step to see how to implement this test.",
      "pattern": "^[^\\S\\n]*public void testSizeEmptyList\\(\\) \\{"
    },
    {
      "file": "src/IntegerArrayListTest.java",
      "description": "You should have replaced the `//TODO` comment in the `testSizeEmptyList` method with `assertEquals(list.size(), 0);` to implement the test. \r\n\r\nWhat you are doing is calling the `size()` method on the `list` variable created in the `setup()` method. The list is empty, since all that has happened is the empty list was created and then you called `list.size()`. So you are asserting that the return value of `list.size()` is equal to 0.",
      "pattern": "^[^\\S\\n]*public void testSizeEmptyList\\(\\) \\{"
    },
    {
      "file": "src/IntegerArrayListTest.java",
      "description": "While testing that the `size()` method can also correctly detect a non-empty list is critical to the functionality of the `IntegerArrayList` class, you have not yet implemented the `add()` method, so the list can not be non-mepty at this point. This test will definitely lead to a `NotImplementedException`.\n\nIf you want, you can still try to implement the test case first, but it is also fine to leave this empty for now.\n\nWriting a test case *before* all required methods are implemented is the truest form of [\"Test-driven Development\"](https://en.wikipedia.org/wiki/Test-driven_development). For this module, we are focused on understanding unit tests, testing frameworks, and how to integrate them into our development cycle.\n\nReturn to [Unit 3 of the \"Implementing unit tests in a simple Java program\" module on Microsoft Learn]() to complete the quiz and move on to the next part.",
      "pattern": "^[^\\S\\n]*public void testSizeNonEmptyList\\(\\) \\{"
    }
  ],
  "ref": "exercise-1-testing-size"
}